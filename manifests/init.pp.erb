#
# = Class: <%= metadata.name %>
#
# This class installs and manages <%= metadata.name %>
#
#
# == Parameters
#
# Refer to https://github.com/stdmod for official documentation
# on the stdmod parameters used
#
class <%= metadata.name %> (

  $package_name              = $<%= metadata.name %>::params::package_name,
  $package_ensure            = 'present',

  $config_file_path          = $<%= metadata.name %>::params::config_file_path,
  $config_file_require       = 'Package[<%= metadata.name %>]',
  $config_file_replace       = undef,
  $config_file_source        = undef,
  $config_file_template      = undef,
  $config_file_content       = undef,
  $config_file_options_hash  = { },

  $config_dir_path           = $<%= metadata.name %>::params::config_dir_path,
  $config_dir_source         = undef,
  $config_dir_purge          = false,
  $config_dir_recurse        = true,

  $dependency_class          = undef,
  $my_class                  = undef,

  ) inherits <%= metadata.name %>::params {


  # Class variables validation and management

  validate_bool($config_dir_recurse)
  validate_bool($config_dir_purge)
  if $config_file_options_hash { validate_hash($config_file_options_hash) }

  $config_file_owner          = $<%= metadata.name %>::params::config_file_owner
  $config_file_group          = $<%= metadata.name %>::params::config_file_group
  $config_file_mode           = $<%= metadata.name %>::params::config_file_mode

  $manage_config_file_content = default_content($config_file_content, $config_file_template)

  if $package_ensure == 'absent' {
    $config_dir_ensure = absent
    $config_file_ensure = absent
  } else {
    $config_dir_ensure = directory
    $config_file_ensure = present
  }


  # Dependency class

  if $<%= metadata.name %>::dependency_class {
    include $<%= metadata.name %>::dependency_class
  }


  # Resources managed

  if $<%= metadata.name %>::package_name {
    package { '<%= metadata.name %>':
      ensure => $<%= metadata.name %>::package_ensure,
      name   => $<%= metadata.name %>::package_name,
    }
  }

  if $<%= metadata.name %>::config_file_path {
    file { '<%= metadata.name %>.conf':
      ensure  => $<%= metadata.name %>::config_file_ensure,
      path    => $<%= metadata.name %>::config_file_path,
      mode    => $<%= metadata.name %>::config_file_mode,
      owner   => $<%= metadata.name %>::config_file_owner,
      group   => $<%= metadata.name %>::config_file_group,
      source  => $<%= metadata.name %>::config_file_source,
      content => $<%= metadata.name %>::manage_config_file_content,
      require => $<%= metadata.name %>::config_file_require,
    }
  }

  if $<%= metadata.name %>::config_dir_source {
    file { '<%= metadata.name %>.dir':
      ensure  => $<%= metadata.name %>::config_dir_ensure,
      path    => $<%= metadata.name %>::config_dir_path,
      source  => $<%= metadata.name %>::config_dir_source,
      recurse => $<%= metadata.name %>::config_dir_recurse,
      purge   => $<%= metadata.name %>::config_dir_purge,
      force   => $<%= metadata.name %>::config_dir_purge,
      require => $<%= metadata.name %>::config_file_require,
    }
  }



  # Extra classes

  if $<%= metadata.name %>::my_class {
    include $<%= metadata.name %>::my_class
  }

}
